import Nerv from "nervjs";
import Taro from "@tarojs/taro-h5";
import { PickerView, PickerViewColumn, View } from "@tarojs/components";
import { classNames } from "../../../../lib/index";
import ClDrawer from "../../../drawer/index";
import ClLayout from "../../../layout/index";
import ClFlex from "../../../flex/index";
import ClText from "../../../text/index";
class AlipayMutiSelect extends Taro.Component {
  constructor() {
    super(...arguments);
  }
  updateData() {
    const { multiSelector } = this.props;
    const range = multiSelector && multiSelector.range || [];
    const rangeKey = multiSelector && multiSelector.rangeKey || "";
    const value = multiSelector && multiSelector.value || [];
    if (value.length) {
      const selected = range.map((list, index) => list[value[index]]);
      this.setState({
        selectedValue: selected.map(item => typeof item === "string" ? item : item[rangeKey]).join(",")
      });
    } else {
      this.setState({
        selectedValue: range.map(item => item[0]).map(item => typeof item === "string" ? item : item[rangeKey]).join(",")
      });
    }
    this.setState({
      lastSelected: value.length ? value : range.map(() => 0)
    });
  }
  componentDidMount() {
    this.updateData();
  }
  onClick() {
    this.setState({
      show: true
    });
  }
  onConfirm() {
    const { multiSelector } = this.props;
    const range = multiSelector && multiSelector.range || [];
    const rangeKey = multiSelector && multiSelector.rangeKey || "";
    const current = range.map(item => typeof item[0] === "string" ? item : item[rangeKey]);
    this.props.onChange && this.props.onChange(this.state.tempSelected);
    this.setState({
      show: false,
      selectedValue: this.state.tempSelected.map((num, index) => current[index][num]).join(","),
      lastSelected: this.state.tempSelected
    });
  }
  onCancel() {
    this.props.onCancel && this.props.onCancel(this.state.lastSelected);
    this.setState({
      show: false,
      tempSelected: this.state.lastSelected
    });
  }
  tempChangeValue(e) {
    const value = e.detail.value;
    this.props.onColumnChange && this.props.onColumnChange(value);
    this.setState({
      tempSelected: value
    });
  }
  render() {
    const { multiSelector } = this.props;
    const range = multiSelector && multiSelector.range || [];
    const rangeKey = multiSelector && multiSelector.rangeKey || "";
    const value = multiSelector && multiSelector.value || [];
    return <View className={classNames(["cu-form-picker"])} onClick={this.onClick.bind(this)}>
        <View className="picker">{this.state.selectedValue}</View>
        <ClDrawer closeWithShadow show={this.state.show} onCancel={() => {
        this.setState({
          show: false
        });
      }}>
          <ClLayout padding={"normal"} paddingDirection="vertical">
            <ClLayout padding={"large"} paddingDirection={"horizontal"}>
              <ClFlex justify={"between"}>
                <View onClick={this.onCancel.bind(this)}>
                  <ClText text="取消" textColor={"green"} />
                </View>
                <View onClick={this.onConfirm.bind(this)}>
                  <ClText text="确定" textColor={"green"} />
                </View>
              </ClFlex>
            </ClLayout>
          </ClLayout>
          <PickerView value={value} onChange={this.tempChangeValue.bind(this)}>
            {range.map((itemList, index) => {
            return <PickerViewColumn key={"key-" + index}>
                  {itemList.map((item, index) => {
                let name = typeof item !== "string" ? item[rangeKey] : item;
                return <View key={"key-" + index}>{name}</View>;
              })}
                </PickerViewColumn>;
          })}
          </PickerView>
        </ClDrawer>
      </View>;
  }
}
AlipayMutiSelect.options = {
  addGlobalClass: true
};
AlipayMutiSelect.state = {
  show: false,
  selectedValue: "",
  tempSelected: [],
  lastSelected: []
};
export default AlipayMutiSelect;